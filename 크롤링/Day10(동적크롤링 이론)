#동적 크롤링(라이브러리 'selenium')
'selenium'은 웹 드라이버 (webdriver)를 사용하여 자동화를 실현하는 라이브러리입니다.

# 📌webdriver 
'selenium'의 'webdriver'는 많은 브라우저 (크롬, 파이어폭스 등), 운영체제 및 프로그래밍 언어 (파이썬, 자바, C# 등)를 지원하며 웹 응용 프로그램들의 테스트를 단순화 및 가속화 해주는 툴입니다.
'webdriver'가 지닌 다양한 장점 중 일부는 다음과 같습니다.


✔ 다채로운 프로그래밍 언어 지원
✔ 쉽고 단순한 사용법
✔ 실행 과정의 시각화로 인한 실시간 확인


'webdriver'는 사용하는 브라우저에 맞게 설치해주어야 하는데요.

우리는 크롬 브라우저를 사용할 예정이므로 'chromedriver.exe'를 설치합니다.

# 📌chromedriver.exe 
주의 사항) 크롬 브라우저는 상시 업데이트 되기 때문에 본인도 모르는 사이에 크롬 버전이 바뀔 수도 있습니다.
          이런 경우에는 이전에 설치한 'chromedriver.exe'과 현재 크롬 브라우저의 버전이 맞지 않아서
          크롤링 진행시 에러가 발생할 수 있습니다.

만약 나중에 스스로 '오랜만에 동적크롤링을 한다' 라는 생각이 든다면
크롬 버전 확인 및 버전에 맞는 'chromedriver.exe'의 재설치를 권장합니다😉


​

📌라이브러리 'time' 
시간과 관련된 많은 함수를 제공하는 라이브러리로,
파이썬과 함께 자동으로 설치된 라이브러리이기 때문에 별도의 설치 과정이 필요하지 않습니다.


'time' 라이브러리의 내장함수 'sleep()'은 동적크롤링을 하며 많이 사용하는 함수입니다.
'time' 라이브러리는 동적크롤링에 반드시 필요한 것은 아닙니다.

하지만
웹 페이지의 로딩 시간이 오래 걸릴 수도 있고, 혹시나 클릭, 입력과 같은 작업이 누락될 확률을 낮추기 위해 사용할 것을 '매우' 권장합니다.
('time' 라이브러리를 사용하지 않는 분들을 거의 못 본 것 같네요,,😂)

예시)
만약 이메일 내용을 크롤링한다고 가정해보면,
'아이디 입력' → '비밀번호 입력' → '메일함 클릭' → '첫 번째 메일 클릭'
이 네 가지 작업을 0.1초도 안되는 시간 동안 진행하기에는 웹 페이지의 로딩 속도가 따라오지 못할 수 있습니다.
따라서 각 작업 사이에 'time.sleep(1)' 이런 식으로 1초 정도의 여유를 주면서 크롤링이 끊기지 않도록 설정해줍니다🙂

​
​﻿
1. get()

2. find_element_by_ ?? ()

-find_element_by_id = 요소의 속성 id로 찾는 오브젝트를 찾습니다.

-find_element_by_class_name 요소의 속성 class가 포함된 오브젝트를 찾습니다.

-find_element_by_name 요소의 속성 name로 찾는 오브젝트를 찾습니다.

-find_element_by_xpath xpath를 이용해서 오브젝트를 찾습니다.

-find_element_by_link_text 하이퍼 링크의 텍스트로 오브젝트를 찾습니다.(완전 일치) - 탐색이 잘 안됩니다. 

-find_element_by_partial_link_text 하이퍼 링크의 텍스트로 오브젝트를 찾습니다.(포함) - 탐색이 잘 안됩니다. 

-find_element_by_tag_name 요소의 태그 이름으로 찾습니다. 

-find_element_by_css_selector css selector(sizzle)로 오브젝트를 찾습니다.






3. find_elements_by_ ?? ()

4. click()

5. send_keys()

﻿

https://blog.naver.com/esb2967/222279294670
https://www.selenium.dev/documentation/ko/webdriver/web_element/
